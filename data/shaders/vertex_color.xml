<technique name="VertexColor">

<pipeline name="firstPass" layer="main">	

	<attributes>
		<position type="vec3" name="aPosition" location="0"/>
		<color type="vec3" name="aColor" location="1"/>
	</attributes>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		<constants>
			<constant name="matWVP" type="mat4" />
		</constants>
		<source>
			<![CDATA[

				attribute vec3 aPosition;		
				attribute vec3 aColor;					
				uniform mat4 matWVP;
				
				varying vec3 vColor;
				
				void main() 
				{
					gl_Position = matWVP * vec4(aPosition, 1.0);
					vColor = aColor;
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		
		<source>
			<![CDATA[

				precision mediump float;
				
				varying vec3 vColor;
				
				void main() 
				{				
					gl_FragColor = vec4(vColor, 1.0);
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
	
	<!-- VULKAN SHADER/-->
	<shader language="SPIR-V" api="Vulkan">
		<vertexShader>
			<constants>
				<constant name="matWVP" type="mat4" />
			</constants>
			<source val="vert.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable

					layout (std140, push_constant) uniform PushConsts 
					{
						mat4 MVP;
					} pushConsts;

					layout(location = 0) in vec3 aPosition;

					void main() 
					{
						gl_Position = pushConsts.MVP * vec4(aPosition, 1.0);
					}
				
				]]>
			</source>
		</vertexShader>
		
		<fragmentShader>
			<constants>
				<constant name="color" type="vec4" usage="object" />
			</constants>
			<source val="frag.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable
					
					layout (std140, push_constant) uniform PushCnsts 
					{
						layout(offset = 64) vec4 color;
					} pushColorConsts;
					
					layout(location = 0) out vec4 outColor;

					void main() 
					{
						outColor = pushColorConsts.color;
						//outColor = vec4(0.0, 0.0, 0.0, 1.0);
					}
		
				]]>	
			</source>
		</fragmentShader>
	
	</shader>

</pipeline>


</technique>