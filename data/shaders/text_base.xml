<technique name="ConstantColor">

<pipeline name="firstPass" layer="main">	

	<depthStencilState>
		<depthTest val="false"/>
	</depthStencilState>
	
	<blendingState>
		<enabled val="true"/>
		<srcFactor val="SrcAlpha"/>
		<dstFactor val="InvSrcAlpha"/>
		<operation val="Add"/>
	</blendingState>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		<constants>
			<constant name="orthoMat" type="mat4"/>
		</constants>
		<source>
			<![CDATA[

				attribute vec3 position;				
				attribute vec2 uv;
				attribute vec4 color;
				
				uniform mat4 orthoMat;
				
				varying vec2 vUV;
				varying vec4 vColor;
				
				void main() 
				{
					gl_Position = orthoMat * vec4(position, 1.0);
					vUV = uv;
					vColor = color;
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		<constants>
			
			<sampler name="fontAtlas" type="2D">
				<filtering min="Linear" mag="Linear"/>
				<tiling U="Repeat" V="Repeat"/>
			</sampler>
		</constants>
		<source>
			<![CDATA[

				precision mediump float;
				uniform sampler2D fontAtlas;
				varying vec4 vColor;
				varying vec2 vUV;

				void main() 
				{				
					//vec4 color = texture2D(fontAtlas, vUV);
					//gl_FragColor = vec4(0.0, 0.0, 0.0, color.r);
					
					vec4 color = texture2D(fontAtlas, vUV);
					//gl_FragColor = vec4(0.0, 0.0, 0.0, color.r);
					gl_FragColor = color * vColor;
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
	
	<!-- VULKAN SHADER/-->
	<shader language="SPIR-V" api="Vulkan">
		<vertexShader>
		<constants>
			<constant name="orthoMat" type="mat4"/>
		</constants>
			<source val="vert.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable
					
					layout (std140, push_constant) uniform PushConsts 
					{
						mat4 orthoMat;
					} pushConsts;
					
					layout(location = 0) in vec3 aPosition;
					layout(location = 1) in vec2 aUV;
					
					layout(location = 0) out vec2 vUV;

					void main() 
					{
						gl_Position = pushConsts.orthoMat * vec4(aPosition, 1.0);
						vUV = aUV;
					}
				
				]]>
			</source>
		</vertexShader>
		
		<fragmentShader>
			<constants>
				<sampler name="fontAtlas" type="2D">
					<filtering min="Linear" mag="Linear"/>
					<tiling U="Repeat" V="Repeat"/>
				</sampler>
			</constants>
			<source val="frag.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable
					
					layout(binding = 0) uniform sampler2D fontAtlas;
					
					layout(location = 0) in vec2 vUV;
					
					layout(location = 0) out vec4 outColor;

					void main() 
					{
						vec4 color = texture(fontAtlas, vUV);
						outColor = vec4(0.0, 0.0, 0.0, color.r);
					}
		
				]]>	
			</source>
		</fragmentShader>
	
	</shader>

</pipeline>

</technique>