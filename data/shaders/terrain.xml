<technique name="Terrain">

<pipeline name="firstPass" layer="main">	

	<!--rasterizationState>
		<cullFace val="none"/>
	</rasterizationState-->

	<attributes>
		<position type="vec3" name="aPosition" location="0"/>
		<normal type="vec3" name="aNormal" location="1"/>
	</attributes>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		<constants>
			<constant name="matWVP" type="mat4" />
			<constant name="matWorld" type="mat4"/>
		</constants>
		<source>
			<![CDATA[

				attribute mediump vec3 aPosition;	
				attribute mediump vec3 aNormal;	
				
				uniform mediump mat4 matWVP;
				uniform mediump mat4 matWorld;
				
				varying mediump vec3 vNormal;
				
				void main() 
				{
					gl_Position = matWVP * vec4(aPosition, 1.0);
					vec4 tmpNormal = matWorld * vec4(aNormal, 0.0);
					vNormal = tmpNormal.xyz;
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		<constants>
			<constant name="dLightDirection" type="vec3"/>
			<constant name="dLightColor" type="vec3"/>
		</constants>
		<source>
			<![CDATA[

				precision mediump float;
				uniform vec3 dLightDirection;
				uniform vec3 dLightColor;
				
				varying vec3 vNormal;
				
				void main() 
				{				
					float NdL = dot(normalize(vNormal), dLightDirection);
					vec3 diffuse = NdL * dLightColor;
					
					vec3 color = vec3(1.0, 1.0, 1.0);
					color = diffuse * color;
					gl_FragColor = vec4(color, 1.0);
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
	
	<!-- VULKAN SHADER/-->
	<shader language="SPIR-V" api="Vulkan">
		<vertexShader>
			<constants>
				<constant name="matWVP" type="mat4" />
			</constants>
			<source val="vert.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable

					layout (std140, push_constant) uniform PushConsts 
					{
						mat4 MVP;
					} pushConsts;

					layout(location = 0) in vec3 aPosition;

					void main() 
					{
						gl_Position = pushConsts.MVP * vec4(aPosition, 1.0);
					}
				
				]]>
			</source>
		</vertexShader>
		
		<fragmentShader>
			<source val="frag.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable
					
					layout(location = 0) out vec4 outColor;

					void main() 
					{
						outColor = vec4(1.0, 1.0, 1.0, 1.0);
					}
		
				]]>	
			</source>
		</fragmentShader>
	
	</shader>

</pipeline>

</technique>