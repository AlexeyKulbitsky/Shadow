<?xml version="1.0"?>
<technique name="ConstantColor">

<pipeline name="firstPass" layer="main">	
	<params>
		<param name="diffuse" desc="Diffuse map" type="Sampler2D"/>
		<param name="normalMap" desc="Normal map" type="Sampler2D"/>
		<param name="addColor" desc="Additional color (RGB)" type="Color3"/>
	</params>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		
		<source>
			<![CDATA[
					
				attribute vec3 position;	
				attribute vec3 normal;			
				attribute vec2 uv;
				attribute vec3 tangent;
				attribute vec3 binormal;

				uniform mat4 matWVP;
				uniform mat4 matWorld;
				uniform vec3 cameraPosition;
				
				varying vec2 vUV;
				varying vec3 eyeVec;
				varying vec3 vNormal;
				varying mat3 vTBNmatrix;
				
				void main() 
				{
					gl_Position = matWVP * vec4(position, 1.0);
					vec4 posWorld = matWorld * vec4(position, 1.0);
					eyeVec = normalize(cameraPosition - posWorld.xyz);
					vec4 T = normalize(matWorld * vec4(tangent, 0.0));
					vec4 B = normalize(matWorld * vec4(binormal, 0.0));
					vec4 N = normalize(matWorld * vec4(normal, 0.0));
					vTBNmatrix = mat3(T.xyz, B.xyz, N.xyz);
					vNormal = N.xyz;
					vUV = uv;

					
					
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		
		<source>
			<![CDATA[
				
				#ifdef GL_ES
					precision mediump float;
				#endif

				uniform sampler2D diffuse;
				uniform sampler2D normalMap;
				uniform vec3 dLightDirection;
				uniform vec3 dLightColor;
				uniform vec3 addColor;

				varying vec2 vUV;
				varying vec3 eyeVec;	
				varying vec3 vNormal;
				varying mat3 vTBNmatrix;

				void main() 
				{				

					vec3 V = normalize(eyeVec);
					vec3 N = texture2D(normalMap, vUV).rgb;
					N = normalize(N);
					N = normalize(N * 2.0 - 1.0);
					N = normalize(vTBNmatrix * N);

					vec3 L = normalize(-dLightDirection);
					vec3 R = reflect(-V, N);
					float NdL = dot(N, L);

					const float specPower = 90.0;
					const vec3 specColor = vec3(0.7, 0.7, 0.0);
					vec3 diff = dLightColor * max(NdL, 0.0);
					vec3 spec = specColor * pow(max(dot(L, R), 0.0), specPower);
					vec3 ambient = vec3(0.4);

					vec3 objectColor = texture2D(diffuse, vUV).xyz;
					vec3 finalColor = objectColor * (diff + spec + ambient) * addColor;
					gl_FragColor = vec4(finalColor, 1.0);
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
	
	<!-- VULKAN SHADER/-->
	<shader language="SPIR-V" api="Vulkan">
		<vertexShader>
			<constants>
				<constant name="matWVP" type="mat4" />
			</constants>
			<source val="vert.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable

					layout (std140, push_constant) uniform PushConsts 
					{
						mat4 MVP;
					} pushConsts;

					layout(location = 0) in vec3 aPosition;
					layout(location = 1) in vec2 aUV;
					
					layout(location = 0) out vec2 fragTexCoord;

					void main() 
					{
						gl_Position = pushConsts.MVP * vec4(aPosition, 1.0);
						fragTexCoord = aUV;
					}
				
				]]>
			</source>
		</vertexShader>
		
		<fragmentShader>
			<constants>
				<sampler name="diffuse" type="2D">
					<filtering min="Linear" mag="Linear"/>
					<tiling U="Repeat" V="Repeat"/>
				</sampler>
			</constants>
			<source val="frag.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable
					
					layout(binding = 0) uniform sampler2D diffuse;
					
					layout(location = 0) in vec2 fragTexCoord;
					
					layout(location = 0) out vec4 outColor;

					void main() 
					{
						//outColor = vec4(fragTexCoord.x, fragTexCoord.y, 0.0, 1.0);
						outColor = texture(diffuse, fragTexCoord);
					}
		
				]]>	
			</source>
		</fragmentShader>
	
	</shader>

</pipeline>

<!--pipeline name="tecnicalPass" layer="main">	
	<constants>
		<uniforms>
			<uniform name="color" type="vec4"/>
			<uniform name="matMVP" type="mat4" val="model.worldViewProjectionMatrix"/>

			<constant name="matMVP" type="mat4" />
		</uniforms>
	</constants>
	
	<attributes>
		<position 	type="vec3" name="aPosition"/>
	</attributes>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		<source>
			<![CDATA[

				attribute vec3 aPosition;
				uniform mat4 matMVP;
				
				void main() 
				{
					gl_Position = matMVP * vec4(aPosition, 1.0);
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		<source>
			<![CDATA[

				precision mediump float;
		
				uniform vec4 color;
		
				void main() 
				{				
					gl_FragColor = vec4(color);
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
</pipeline-->

</technique>