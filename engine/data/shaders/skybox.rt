<?xml version="1.0"?>
<technique name="Skybox">

<pipeline name="firstPass" layer="background">	

	<depthStencilState>
		<depthTest val="false"/>
	</depthStencilState>
	
	<rasterizationState>
		<cullFace val="none"/>
	</rasterizationState>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		
		<source>
			<![CDATA[

				attribute vec3 position;	
				uniform mat4 matViewRotationProjection;
				
				varying vec3 vUV;
				
				void main() 
				{
					vec4 pos = matViewRotationProjection * vec4(position, 1.0);
					gl_Position = pos;
					vUV = position;
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		
		<source>
			<![CDATA[

				#ifdef GL_ES
					precision mediump float;
				#endif

				uniform samplerCube skybox;
				varying vec3 vUV;


				void main() 
				{				
					vec3 color = textureCube(skybox, vUV).xyz;
					gl_FragColor = vec4(color, 1.0);
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
	
	<!-- VULKAN SHADER/-->
	<shader language="SPIR-V" api="Vulkan">
		<vertexShader>
			<constants>
				<constant name="matWVP" type="mat4" />
			</constants>
			<source val="vert.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable

					layout (std140, push_constant) uniform PushConsts 
					{
						mat4 MVP;
					} pushConsts;

					layout(location = 0) in vec3 aPosition;
					layout(location = 1) in vec2 aUV;
					
					layout(location = 0) out vec2 fragTexCoord;

					void main() 
					{
						gl_Position = pushConsts.MVP * vec4(aPosition, 1.0);
						fragTexCoord = aUV;
					}
				
				]]>
			</source>
		</vertexShader>
		
		<fragmentShader>
			<constants>
				<sampler name="diffuse" type="2D">
					<filtering min="Linear" mag="Linear"/>
					<tiling U="Repeat" V="Repeat"/>
				</sampler>
			</constants>
			<source val="frag.spv">
				<![CDATA[

					#version 450
					#extension GL_ARB_separate_shader_objects : enable
					
					layout(binding = 0) uniform sampler2D diffuse;
					
					layout(location = 0) in vec2 fragTexCoord;
					
					layout(location = 0) out vec4 outColor;

					void main() 
					{
						//outColor = vec4(fragTexCoord.x, fragTexCoord.y, 0.0, 1.0);
						outColor = texture(diffuse, fragTexCoord);
					}
		
				]]>	
			</source>
		</fragmentShader>
	
	</shader>

</pipeline>

<!--pipeline name="tecnicalPass" layer="main">	
	<constants>
		<uniforms>
			<uniform name="color" type="vec4"/>
			<uniform name="matMVP" type="mat4" val="model.worldViewProjectionMatrix"/>

			<constant name="matMVP" type="mat4" />
		</uniforms>
	</constants>
	
	<attributes>
		<position 	type="vec3" name="aPosition"/>
	</attributes>
	
	<shader language="GLSL" api="GLES20">
		<vertexShader>
		<source>
			<![CDATA[

				attribute vec3 aPosition;
				uniform mat4 matMVP;
				
				void main() 
				{
					gl_Position = matMVP * vec4(aPosition, 1.0);
				}
				
			]]>
		</source>
		</vertexShader>

		<fragmentShader>
		<source>
			<![CDATA[

				precision mediump float;
		
				uniform vec4 color;
		
				void main() 
				{				
					gl_FragColor = vec4(color);
				} 
		
			]]>	
		</source>
		</fragmentShader>
	</shader>
</pipeline-->

</technique>