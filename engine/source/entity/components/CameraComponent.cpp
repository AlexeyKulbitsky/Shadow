#include "CameraComponent.h"

#include "../../scene/Camera.h"
#include "../../serialization/ObjectFactory.h"

#include "../../scene/SceneManager.h"
#include "../../Device.h"

namespace sh
{

	CameraComponent::CameraComponent()
	{
		m_camera = Device::GetInstance()->GetSceneManager()->GetCamera()->Clone();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	CameraComponent::~CameraComponent()
	{
		if (m_camera)
		{
			delete m_camera;
			m_camera = nullptr;
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	void CameraComponent::RegisterObject()
	{
		ObjectFactory::GetInstance()->RegisterFactory<CameraComponent>("Components");
		S_ACCESSOR_PROPERTY("Fov", GetFov, SetFov);
		S_ACCESSOR_PROPERTY("Far plane", GetFarPlane, SetFarPlane);
		S_ACCESSOR_PROPERTY("Near plane", GetNearPlane, SetNearPlane);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	Component* CameraComponent::Clone() 
	{
		CameraComponent* component = new CameraComponent();
		
		component->m_camera = m_camera->Clone();
		
		return component;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	sh::scene::Camera* CameraComponent::GetCamera()
	{
		return m_camera;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	void CameraComponent::SetFov(float fov)
	{
		m_camera->SetFov(math::Radians(fov));
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	float CameraComponent::GetFov() const
	{
		return math::Degrees(m_camera->GetFov());
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	void CameraComponent::SetFarPlane(float farPlane)
	{
		m_camera->SetFarPlane(farPlane);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	float CameraComponent::GetFarPlane() const
	{
		return m_camera->GetFarPlane();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	void CameraComponent::SetNearPlane(float nearPlane)
	{
		m_camera->SetNearPlane(nearPlane);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////

	float CameraComponent::GetNearPlane() const
	{
		return m_camera->GetNearPlane();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////


} // sh